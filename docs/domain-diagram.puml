@startuml Demy: Diagrams of Domain Models

skinparam class {
    BackgroundColor LightYellow/D3F5F5
    ArrowColor SeaGreen
    ' BackgroundColor<<Aggregate Root>> #27D3F5
    ' BackgroundColor<<Entity>> #9ACD32
    ' BackgroundColor<<Value Object>> #FFD700
    ' BorderColor Black
    ' FontSize 12
}

package "Enrollment Context" <<Node>> #E0FFF9 {
    class Enrollment <<(A, #27D3F5) Aggregate Root>> {
        - Long id
    }
    class Student <<(E, #9ACD32) Entity>> {
        - Long id
    }
    enum EnrollmentStatus <<(E, #FF7F50) Value Object>> {
        ACTIVE
        INACTIVE
    }
    class AcademicPeriod <<(E, #9ACD32) Entity>> {
        - Long id
    }
    ' Relationships
    Enrollment "1" --> "1" Student : for >
    AcademicPeriod "1" o-- "0..*" Enrollment : includes >
    Enrollment "1" --> "1" EnrollmentStatus : has >
}

package "Institution Management Context" <<Node>> #F0FFF0 {
    class Academy <<(A, #27D3F5) Aggregate Root>> {
        - Long id
        + addTeacher(Teacher)
        + assignAdministrator(Administrator)
    }

    class Administrator <<(E, #9ACD32) Entity>> {
        - Long id
    }

    class Teacher <<(E, #9ACD32) Entity>> {
        - Long id
    }

    ' Relationships
    Academy "1" --> "1" Administrator : isManagedBy >
    Academy "1" --> "0..*" Teacher : includes >
}

package "Scheduling Context" <<Node>> #FFF0F0 {
    class Schedule <<(A, #27D3F5) Aggregate Root>> {
        - Long id
        + addClassSession(ClassSession)
        + removeClassSession(ClassSession)
        + validateConflicts(): boolean
    }

    class ClassSession <<(E, #9ACD32) Entity>> {
        - Long id
        - TeacherId teacherId
    }

    class Course <<(E, #9ACD32) Entity>> {
        - Long id
    }

    class Room <<(E, #9ACD32)Entity>> {
        - Long id
    }

    ' Relationships
    Schedule "1" --> "0..*" ClassSession : contains >
    ClassSession "1" --> "1" Course : belongsTo >
    ClassSession "1" --> "1" Room : heldIn >
}

package "Student Attendance Context" <<Node>> #F0F8FF {
    class ClassAttendance <<(A, #27D3F5) Aggregate Root>> {
        - Long id
        - Long classSessionId
        + recordAttendance(Long studentId, AttendanceStatus status)
    }

    class AttendanceRecord <<(E, #9ACD32) Entity>> {
        - Long id
        - Long studentId
        + changeStatus(AttendanceStatus newStatus)
    }

    enum AttendanceStatus <<(V, #FFD700) Value Object>> {
        PRESENT
        ABSENT
        EXCUSED
    }
    ' Relationships
    ClassAttendance "1" --> "0..*" AttendanceRecord : includes >
    AttendanceRecord "1" --> "1" AttendanceStatus : has >
}

package "Staff Attendance Context" <<Node>> #FFFADF {
    class WorkDayAttendance <<(A, #27D3F5) Aggregate Root>> {
        - Long id
        - LocalDate date
        - TeacherId teacherId
        + registerEntry(Source)
        + registerExit(Source)
    }

    class EntryRecord <<(E, #9ACD32) Entity>> {
        - LocalDateTime timestamp
        - Source source
    }

    class ExitRecord <<(E, #9ACD32) Entity>> {
        - LocalDateTime timestamp
        - Source source
    }

    class Source <<(V, #FFD700) Value Object>> {
        - String originType
        - String deviceId
    }

    ' Relationships
    WorkDayAttendance "1" --> "0..*" EntryRecord : has >
    WorkDayAttendance "1" --> "0..*" ExitRecord : has >
    EntryRecord "1" --> "1" Source : from >
    ExitRecord "1" --> "1" Source : from >
}

package "Billing Management" <<Node>> #DFFFFF {
    class BillingAccount <<(A, #27D3F5) Aggregate Root>> {
        - Long id
        - Long studentId
        - List<Invoice> invoices
        - List<Payment> payments
        + addInvoice(Invoice)
        + registerPayment(Payment)
        + getOutstandingBalance()
        + getInvoiceStatus(invoiceId)
    }

    class Invoice <<(E, #9ACD32) Entity>> {
        - Long id
        - BigDecimal totalAmount
        - LocalDate dueDate
        - BigDecimal paidAmount
        + isPaid()
    }

    ' Relationships
    BillingAccount "1" o-- "0..*" Invoice : manages >
}

package "Accounting Management" <<Node>> #FFEFD5 {
    class Transaction <<(A, #27D3F5) Aggregate Root>> {
        - Long id
        - Payment payment
        - TransactionType type
        - LocalDateTime timestamp
    }

    class Payment <<(E, #9ACD32) Entity>> {
        - Long id
        - BigDecimal amount
        - LocalDate paymentDate
        - PaymentMethod method
    }

    enum PaymentMethod <<(V, #FFD700) Value Object>> {
        CREDIT_CARD
        BANK_TRANSFER
        CASH
    }

    enum TransactionType <<(V, #FFD700) Value Object>> {
        INCOME
        EXPENSE
    }

    class AccountingSystem <<(A, #27D3F5) Aggregate Root>> {
        - Long id
        + generateFinancialReport(LocalDate startDate, LocalDate endDate)
    }

    class FinancialReport <<(E, #9ACD32) Entity>> {
        - Long id
        - LocalDate startDate
        - LocalDate endDate
        - BigDecimal totalIncome
        - BigDecimal totalExpenses
    }

    ' Relationships
    AccountingSystem "1" o-- "0..*" FinancialReport : generates >
}

package "Shared Context" <<Node>> #FFF5F5 {
    class TeacherId <<(V, #FFD700) Value Object>> {
        - Long id
    }
}

' Define relationships between contexts
ClassSession "1" --> "1" TeacherId : taughtBy >
WorkDayAttendance "1" --> "1" TeacherId : for >

@enduml